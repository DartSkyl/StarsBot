import random
import os

from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types.chat_member_left import ChatMemberLeft

from utils.user_router import users_router
from keyboards import random_keyboards, main_menu_user
from states import UserStates
from loader import bot_base, bot
from config import MAIN_CHANNEL, BOT_USERNAME


async def get_random_fruit_emoji():
    emojis = ["üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçì", "üçà",
              "üçí", "üçë", "ü•ù", "üçç", "ü•≠", "üçé", "üçä", "üçì", "üçá"]
    random.shuffle(emojis)
    random_string = ''
    for i in emojis:
        random_string += f' {i}'
    return random.choice(emojis), random_string


async def is_digits(s):
    """–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫–∏ - —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Ç"""
    import re
    return bool(re.match(r'^[0-9]+$', s))


@users_router.message(Command('start'))
async def start_func(msg: Message, state: FSMContext):
    """–í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –¥–µ–ª–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞.
    –ò –¥–∞–ª—å—à–µ –ø–æ —à–∞–≥–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if await is_digits(msg.text[7:]) and int(msg.text[7:]) != msg.from_user.id:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        referer_id = int(msg.text[7:])
        referer: str = (await bot_base.get_user(referer_id))[0][2]
        new_ref_set: list = [i for i in referer.split('&')]
        if str(msg.from_user.id) not in new_ref_set:
            new_ref_set.append(msg.from_user.id)
            new_ref_str = '&'.join([str(i) for i in new_ref_set if i != '' and i != 'empty'])  # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ –æ–Ω —Ç–∞–∫–æ–π
            await bot_base.save_referer(referer_id, new_ref_str)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_member = await bot.get_chat_member(chat_id=MAIN_CHANNEL, user_id=msg.from_user.id)
    user = len(await bot_base.get_user(msg.from_user.id)) > 0

    if not user and not isinstance(is_member, ChatMemberLeft):

        random_result = await get_random_fruit_emoji()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂

        # –•—Ä–∞–Ω–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        with open(os.path.join('messages', 'first_contact.txt'), encoding='utf-8') as file:
            msg_text = file.read().format(correct_answer=random_result[0])

        await msg.answer(msg_text,
                         reply_markup=await random_keyboards(
                             user_id=msg.from_user.id,
                             correct_answer=random_result[0],
                             random_fruit_mass=random_result[1]
                         ))
        await state.set_state(UserStates.first_contact)

    elif not user:
        await msg.answer(f'–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {MAIN_CHANNEL}')

    else:
        ref_url = f'https://t.me/{BOT_USERNAME}?start={msg.from_user.id}'
        with open(os.path.join('messages', 'main_menu_message.txt'), encoding='utf-8') as file:
            msg_text = file.read().format(ref_url=ref_url, ref_count='0')
        await msg.answer(msg_text, reply_markup=main_menu_user)


@users_router.callback_query(UserStates.first_contact, F.data.startswith('correct_'))
async def catch_correct_answer(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞–¥–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    await callback.answer()

    await bot_base.add_new_user(callback.from_user.id)
    with open(os.path.join('messages', 'welcome_message.txt'), encoding='utf-8') as file:
        msg_text = file.read()
    await callback.message.answer(msg_text, reply_markup=main_menu_user)

    await state.clear()
