import random
import os
import asyncio

from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types.chat_member_left import ChatMemberLeft
from aiogram.exceptions import TelegramBadRequest

from utils.user_router import users_router
from utils.task_manager import task_manager
from keyboards import random_keyboards, main_menu_user, user_task_menu
from states import UserStates
from loader import bot_base, bot
from config import MAIN_CHANNEL, BOT_USERNAME


async def get_random_fruit_emoji():
    emojis = ["üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçì", "üçà",
              "üçí", "üçë", "ü•ù", "üçç", "ü•≠", "üçé", "üçä", "üçì", "üçá"]
    random.shuffle(emojis)
    random_string = ''
    for i in emojis:
        random_string += f' {i}'
    return random.choice(emojis), random_string


async def is_digits(s):
    """–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫–∏ - —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Ç"""
    import re
    return bool(re.match(r'^[0-9]+$', s))


async def get_user_stats(user_id):
    """–î–æ—Å—Ç–∞–µ–º –∑–≤–µ–∑–¥—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –ë–î"""
    user_data = (await bot_base.get_user(user_id))[0]
    user_stars = user_data[1] / 100
    user_ref_count = user_data[3]
    return user_stars, user_ref_count


# @users_router.message(Command('test'))
# async def test(msg: Message):
#     pass


# ====================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ====================


@users_router.message(Command('start'))
async def start_func(msg: Message, state: FSMContext):
    """–í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –¥–µ–ª–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞.
    –ò –¥–∞–ª—å—à–µ –ø–æ —à–∞–≥–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if await is_digits(msg.text[7:]) and int(msg.text[7:]) != msg.from_user.id:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        referer_id = int(msg.text[7:])
    else:
        referer_id = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_member = await bot.get_chat_member(chat_id=MAIN_CHANNEL, user_id=msg.from_user.id)
    # –ò –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ
    user = len(await bot_base.get_user(msg.from_user.id)) > 0

    if not user and not isinstance(is_member, ChatMemberLeft):

        random_result = await get_random_fruit_emoji()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂

        # –•—Ä–∞–Ω–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
        with open(os.path.join('messages', 'first_contact.txt'), encoding='utf-8') as file:
            msg_text = file.read().format(correct_answer=random_result[0])

        await msg.answer(msg_text,
                         reply_markup=await random_keyboards(
                             user_id=msg.from_user.id,
                             correct_answer=random_result[0],
                             random_fruit_mass=random_result[1]
                         ))
        if referer_id != 0:
            await bot_base.star_rating(referer_id, 25)
        await state.set_data({'referer_id': referer_id})
        await state.set_state(UserStates.first_contact)

    elif not user:
        await msg.answer(f'–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {MAIN_CHANNEL}')

    else:
        ref_url = f'https://t.me/{BOT_USERNAME}?start={msg.from_user.id}'
        with open(os.path.join('messages', 'main_menu_message.txt'), encoding='utf-8') as file:
            user_stat = await get_user_stats(msg.from_user.id)  # –ö–æ—Ä—Ç–µ–∂
            msg_text = file.read().format(ref_url=ref_url, stars_count=user_stat[0], ref_count=user_stat[1])
        await msg.answer(msg_text, reply_markup=main_menu_user)
        await state.clear()


@users_router.callback_query(UserStates.first_contact, F.data.startswith('correct_'))
async def catch_correct_answer(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞–¥–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    await callback.answer()
    referer_id = (await state.get_data())['referer_id']  # –ö–æ–º—É –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏?
    if referer_id != 0:
        await bot_base.star_rating(referer_id, 75)
    await bot_base.add_new_user(callback.from_user.id, referer_id)
    with open(os.path.join('messages', 'welcome_message.txt'), encoding='utf-8') as file:
        msg_text = file.read()
    await callback.message.answer(msg_text, reply_markup=main_menu_user)

    await state.clear()


# ====================
# –ó–∞–¥–∞–Ω–∏—è
# ====================


async def get_profit_to_executor(user_id, task_id):
    """–ù–∞—á–∏—Å–ª—è–µ–º –ø–ª—é—Ö–∏ –≤—Å–µ–º –∫—Ç–æ –º–æ–ª–æ–¥–µ—Ü –∏ –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–æ–≤—ã–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
    ref_percent = 10  # –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    task = await task_manager.get_task(task_id)
    referer_id = (await bot_base.get_user(user_id))[0][2]

    # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∏—Å–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    await bot_base.star_rating(user_id, task.reward)
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await task.new_complete(str(user_id))

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, —Ç–æ —á–º–æ–∫–Ω–µ–º –∏ –µ–≥–æ
    if referer_id != 0:
        await bot_base.star_rating(referer_id, (task.reward / 100 * ref_percent))


@users_router.message(F.text == 'üéØ –ó–∞–¥–∞–Ω–∏—è')
async def open_user_task_menu(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
    try:

        task_generator = task_manager.task_generator()
        task = await anext(task_generator)
        await state.set_data({'task_id': task.task_id, 'task_generator': task_generator})

        await state.set_state(UserStates.executor)

        task_channels_str = '\n'.join(task.channels_list)
        task_str = (f'–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n{task_channels_str}\n\n'
                    f'–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {int(task.reward) / 100}\n\n')

        with open(os.path.join('messages', 'user_task_menu.txt'), encoding='utf-8') as file:
            msg_text = file.read().format(task_str=task_str)
        await msg.answer(msg_text, reply_markup=await user_task_menu())

    except IndexError:
        await msg.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç')
    except StopAsyncIteration:
        await msg.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç')


@users_router.callback_query(UserStates.executor, F.data == 'execute')
async def check_user_task_complete(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    await callback.answer()
    task_id = (await state.get_data())['task_id']

    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂ - –∫–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤, —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
    check_execute = await task_manager.check_execution(callback.from_user.id, task_id)

    if check_execute[0] == len(check_execute[1]):  # –ó–Ω–∞—á–∏—Ç –≤—ã–ø–æ–ª–Ω–∏–ª

        await get_profit_to_executor(callback.from_user.id, task_id)

        await callback.message.edit_text('–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
        await skip_task(callback, state)

    else:
        await callback.message.answer('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')


@users_router.callback_query(UserStates.executor, F.data == 'skip')
async def skip_task(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–¥–∞–Ω–∏–µ"""
    await callback.answer()
    try:
        task_generator = (await state.get_data())['task_generator']
        task = await anext(task_generator)
        await state.update_data({'task_id': task.task_id, 'task_generator': task_generator})

        task_channels_str = '\n'.join(task.channels_list)
        task_str = (f'–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n{task_channels_str}\n\n'
                    f'–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {int(task.reward) / 100}\n\n')

        with open(os.path.join('messages', 'user_task_menu.txt'), encoding='utf-8') as file:
            msg_text = file.read().format(task_str=task_str)
        await callback.message.answer(msg_text, reply_markup=await user_task_menu())
    except IndexError:
        await callback.message.answer('–î—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç')
    except TelegramBadRequest:
        await callback.message.answer('–î—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç')
    except StopAsyncIteration:
        await callback.message.answer('–î—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç')
