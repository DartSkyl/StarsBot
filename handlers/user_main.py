import random
import os
import datetime
from sqlite3 import IntegrityError

from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types.chat_member_left import ChatMemberLeft
from aiogram.exceptions import TelegramBadRequest

from utils.user_router import users_router
from utils.task_manager import task_manager
from keyboards import random_keyboards, main_menu_user, user_task_menu, stars_menu
from states import UserStates
from loader import bot_base, bot
from config import MAIN_CHANNEL, BOT_USERNAME


async def get_random_fruit_emoji():
    emojis = ["üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçì", "üçà",
              "üçí", "üçë", "ü•ù", "üçç", "ü•≠", "üçä", "üçá"]
    random.shuffle(emojis)
    random_string = ''
    for i in emojis:
        random_string += f' {i}'
    return random.choice(emojis), random_string


async def is_digits(s):
    """–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä–æ–∫–∏ - —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Ç"""
    import re
    return bool(re.match(r'^[0-9]+$', s))


async def get_user_stats(user_id):
    """–î–æ—Å—Ç–∞–µ–º –∑–≤–µ–∑–¥—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –ë–î"""
    try:
        user_data = (await bot_base.get_user(user_id))[0]
        user_stars = int(user_data[1]) / 100
        user_ref_count = user_data[3]
        return user_stars, user_ref_count
    except IndexError:
        return 0, 0


async def forming_str_from_txt_file(file_str: str, **kwargs):
    """–§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    new_file_str = (file_str.
                    replace('\{', '{')
                    .replace('\}', '}')
                    .replace('\_', '_')
                    .format(**kwargs))
    return new_file_str


# ====================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ====================


@users_router.message(F.text == '‚≠êÔ∏è –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤–µ–∑–¥—ã')
@users_router.message(Command('start'))
async def start_func(msg: Message, state: FSMContext):
    """–í —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –¥–µ–ª–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞.
    –ò –¥–∞–ª—å—à–µ –ø–æ —à–∞–≥–∞–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, —Ç–æ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    if await is_digits(msg.text[7:]) and int(msg.text[7:]) != msg.from_user.id:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        referer_id = int(msg.text[7:])
    else:
        referer_id = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    is_member = await bot.get_chat_member(chat_id=MAIN_CHANNEL, user_id=msg.from_user.id)
    # –ò –µ—Å—Ç—å –ª–∏ –≤ –±–∞–∑–µ
    user = await bot_base.get_user(msg.from_user.id)
    if not len(user) > 0 and not isinstance(is_member, ChatMemberLeft):

        random_result = await get_random_fruit_emoji()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂

        # –•—Ä–∞–Ω–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ

        msg_text = (await bot_base.settings_get('first_contact'))[1]
        msg_text = await forming_str_from_txt_file(msg_text, correct_answer=random_result[0])
        await msg.answer(msg_text,
                         reply_markup=await random_keyboards(
                             user_id=msg.from_user.id,
                             correct_answer=random_result[0],
                             random_fruit_mass=random_result[1]
                         ))
        is_pay = (await state.get_data()).get('is_pay')
        try:
            await bot_base.add_new_user(msg.from_user.id, referer_id)
            if referer_id != 0 and not is_pay:
                await bot_base.star_rating(referer_id, 25)
                await bot_base.stars_count(25)
        except IntegrityError:
            pass

        await state.set_data({'referer_id': referer_id, 'is_pay': True})
        await state.set_state(UserStates.first_contact)

    elif isinstance(is_member, ChatMemberLeft):
        try:
            await bot_base.add_new_user(msg.from_user.id, referer_id)
            if referer_id != 0:
                await bot_base.star_rating(referer_id, 25)
                await bot_base.stars_count(25)
                await state.set_data({'is_pay': True, 'referer_id': referer_id})
        except IntegrityError:
            pass

        await msg.answer(f'–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {MAIN_CHANNEL}', parse_mode='HTML')

    elif user[0][4] != 'False':
        ref_url = f'https://t\.me/{BOT_USERNAME}?start\={msg.from_user.id}'

        user_stat = await get_user_stats(msg.from_user.id)  # –ö–æ—Ä—Ç–µ–∂
        msg_text = (await bot_base.settings_get('main_menu_message'))[1]
        msg_text = await forming_str_from_txt_file(
            msg_text,
            ref_url=ref_url,
            stars_count=str(user_stat[0]).replace('.', '\.'),
            ref_count=user_stat[1]
            )
        await msg.answer(msg_text, reply_markup=main_menu_user)
        await state.clear()
    else:
        random_result = await get_random_fruit_emoji()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂

        # –•—Ä–∞–Ω–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ

        msg_text = (await bot_base.settings_get('first_contact'))[1]
        msg_text = await forming_str_from_txt_file(msg_text, correct_answer=random_result[0])
        await msg.answer(msg_text,
                         reply_markup=await random_keyboards(
                             user_id=msg.from_user.id,
                             correct_answer=random_result[0],
                             random_fruit_mass=random_result[1]
                         ))
        await state.set_data({'referer_id': referer_id, 'is_pay': True})
        await state.set_state(UserStates.first_contact)


@users_router.callback_query(UserStates.first_contact, F.data.startswith('correct_'))
async def catch_correct_answer(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–∞–¥–æ –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
    await callback.answer()
    referer_id = (await state.get_data())['referer_id']  # –ö–æ–º—É –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–ø—á–∏?
    if referer_id != 0:
        await bot_base.star_rating(referer_id, 75)
        await bot_base.stars_count(75)

    await bot_base.captcha_execute(callback.from_user.id)
    msg_text = (await bot_base.settings_get('welcome_message'))[1]

    msg_text = await forming_str_from_txt_file(msg_text)
    await callback.message.answer(msg_text, reply_markup=main_menu_user)

    await state.clear()


# ====================
# –ó–∞–¥–∞–Ω–∏—è
# ====================


async def get_profit_to_executor(user_id, task_id):
    """–ù–∞—á–∏—Å–ª—è–µ–º –ø–ª—é—Ö–∏ –≤—Å–µ–º –∫—Ç–æ –º–æ–ª–æ–¥–µ—Ü –∏ –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–æ–≤—ã–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º"""
    ref_percent = 10  # –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    task = await task_manager.get_task(task_id)
    referer_id = (await bot_base.get_user(user_id))[0][2]

    # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∏—Å–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    await bot_base.star_rating(user_id, task.reward)
    await bot_base.stars_count(task.reward)
    await bot_base.set_last_task(user_id)
    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    await task.new_complete(str(user_id))
    await bot_base.task_count()

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, —Ç–æ —á–º–æ–∫–Ω–µ–º –∏ –µ–≥–æ
    if referer_id != 0:
        await bot_base.star_rating(referer_id, (task.reward / 100 * ref_percent))
        await bot_base.stars_count(task.reward / 100 * ref_percent)


async def escape_special_chars(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ."""
    escaped = ''
    for char in text:
        if char in '_*[]()~`>#+-=|{}.!':
            escaped += '\\' + char
        else:
            escaped += char
    return escaped


@users_router.message(F.text == 'üéØ –ó–∞–¥–∞–Ω–∏—è')
async def open_user_task_menu(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π"""
    try:

        task_generator = task_manager.task_generator()
        async for task in task_generator:
            if not await task.check_execute(msg.from_user.id) and not await task.check_complete_count():
                await state.set_data({'task_id': task.task_id, 'task_generator': task_generator})

                await state.set_state(UserStates.executor)

                task_channels_str = '\n'.join(task.channels_list)
                task_str = (f'–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n{task_channels_str}\n\n'
                            f'–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {int(task.reward) / 100}\n\n')
                task_str = await escape_special_chars(task_str)
                msg_text = (await bot_base.settings_get('user_task_menu'))[1]
                msg_text = await forming_str_from_txt_file(msg_text, task_str=task_str)
                await msg.answer(msg_text, reply_markup=await user_task_menu(task.task_id))
                break
        else:
            await state.clear()
            await msg.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç')

    except IndexError:
        await msg.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç')
    except StopAsyncIteration:
        await msg.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç')


@users_router.callback_query(UserStates.executor, F.data.startswith('execute_'))
async def check_user_task_complete(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è"""
    task_id = (await state.get_data())['task_id']
    req_task_id = int(callback.data.replace('execute_', ''))

    if task_id == req_task_id:

        # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫–æ—Ä—Ç–µ–∂ - –∫–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤, —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
        check_execute = await task_manager.check_execution(callback.from_user.id, task_id)

        if check_execute[0] == len(check_execute[1]):  # –ó–Ω–∞—á–∏—Ç –≤—ã–ø–æ–ª–Ω–∏–ª
            await callback.answer()
            await get_profit_to_executor(callback.from_user.id, task_id)

            await callback.message.edit_text('–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')
            await skip_task(callback, state)

        else:
            await callback.answer('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–Ω–∞–ª—ã!')
            origin_msg_text = callback.message.text
            origin_msg_text = origin_msg_text.replace('–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:', '–û—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–∞–Ω–∞–ª—ã:')
            for ch in check_execute[1]:
                if ch in origin_msg_text:
                    origin_msg_text = origin_msg_text.replace(('\n' + ch), '')
            new_msg_text = ''
            for s in origin_msg_text.splitlines():
                if s.startswith('https://t.me/') or s.startswith('–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ'):
                    new_msg_text += s.replace('.', '\.').replace('_', '\_') + '\n'
                else:
                    new_msg_text += s + '\n'
            try:
                await callback.message.edit_text(new_msg_text, reply_markup=await user_task_menu(task_id))
            except TelegramBadRequest:
                pass


@users_router.callback_query(UserStates.executor, F.data == 'skip')
async def skip_task(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–¥–∞–Ω–∏–µ"""
    await callback.answer()
    try:
        task_generator = (await state.get_data())['task_generator']

        async for task in task_generator:
            if not await task.check_execute(callback.from_user.id) and not await task.check_complete_count():
                await state.update_data({'task_id': task.task_id, 'task_generator': task_generator})

                task_channels_str = '\n'.join(task.channels_list)
                task_str = (f'–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:\n\n{task_channels_str}\n\n'
                            f'–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {int(task.reward) / 100}\n\n')
                task_str = await escape_special_chars(task_str)
                # with open(os.path.join('messages', 'user_task_menu.txt'), encoding='utf-8') as file:
                #     msg_text = file.read()
                msg_text = (await bot_base.settings_get('user_task_menu'))[1]
                msg_text = await forming_str_from_txt_file(msg_text, task_str=task_str)
                await callback.message.answer(msg_text, reply_markup=await user_task_menu(task.task_id))
                break

        else:
            await state.clear()
            await callback.message.answer('–î—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç')

    except IndexError:
        await callback.message.answer('–î—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç')
    except TelegramBadRequest:
        await callback.message.answer('–î—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç')
    except StopAsyncIteration:
        await callback.message.answer('–î—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç')


# ====================
# –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
# ====================

async def get_yesterday_date():
    today = datetime.datetime.now()
    yesterday = today - datetime.timedelta(days=1)
    formatted_date = yesterday.strftime('%Y-%m-%d')
    return formatted_date


@users_router.message(F.text == 'üíé –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å')
async def daily_bonus(msg: Message):
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å"""
    user_info = (await bot_base.get_user(msg.from_user.id))[0]
    today = str(datetime.datetime.now()).split(' ')[0]
    yesterday = await get_yesterday_date()

    # –£—Å–ª–æ–≤–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ–Ω—É—Å–∞ - –ø—Ä–æ–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª. –í—Å–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏—Å–ø–æ–ª–Ω–µ–Ω–æ –≤ –¥–µ–Ω—å –±–æ–Ω—É—Å–∞
    if user_info[5] == today and user_info[6] == today and user_info[7] != today:

        if yesterday == user_info[7]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–æ–Ω—É—Å–æ–≤
            bonus = user_info[8]
        else:
            bonus = 1

        await bot_base.star_rating(user_info[0], bonus)
        await bot_base.stars_count(bonus)
        await bot_base.set_last_bonus(user_info[0])
        await bot_base.set_bonus(user_info[0], bonus + 1)
        msg_text = f'–ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –±–æ–Ω—É—Å–∞: {bonus}\n'

    elif user_info[5] != today and user_info[6] != today:
        msg_text = ('–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ '
                    '–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ö–æ—Ç—å –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞')

    elif user_info[5] != today:
        msg_text = '–ù—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ç—å –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ'

    elif user_info[6] != today:
        msg_text = '–ù—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ —Å–µ–≥–æ–¥–Ω—è'

    else:
        msg_text = '–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω'

    await msg.answer(msg_text)


# ====================
# –í—ã–≤–æ–¥ –∑–≤–µ–∑–¥
# ====================


@users_router.message(F.text == 'üéÅ –í—ã–≤–µ—Å—Ç–∏ –∑–≤–µ–∑–¥—ã')
async def get_stars_menu(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ –∑–≤–µ–∑–¥"""
    user_stars = (await bot_base.get_user(user_id=msg.from_user.id))[0][1]
    msg_text = (await bot_base.settings_get('stars_withdrawal'))[1]
    msg_text = await forming_str_from_txt_file(msg_text,
                                               stars_count=str(int(user_stars) / 100).replace('.', '\.'))
    await msg.answer(msg_text, reply_markup=await stars_menu())
    try:
        user_request = await bot_base.get_user_request(msg.from_user.username)
        await msg.answer(f'–¢–µ–∫—É—â–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ *{int(user_request[2] / 100)}* ‚≠êÔ∏è')
    except IndexError:
        pass


@users_router.callback_query(F.data.startswith('stars_'))
async def forming_request_for_withdrawal_stars(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥"""
    await callback.answer()
    requirement_stars = int(callback.data.replace('stars_', '')) * 100  # 1 –∑–≤–µ–∑–¥–∞ = 100
    user_stars = (await bot_base.get_user(user_id=callback.from_user.id))[0][1]
    if user_stars >= requirement_stars:
        if callback.from_user.username:
            await bot_base.new_request_for_withdrawal_of_stars(callback.from_user.id, callback.from_user.username, requirement_stars)
            await callback.message.answer('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –∑–≤–µ–∑–¥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞\!')
        else:
            await callback.message.answer('–ü–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"\n'
                                          '–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–π–¥–∏—Ç–µ –≤ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", –∞ –∑–∞—Ç–µ–º –≤ –º–µ–Ω—é "–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç"')
    else:
        await callback.message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥\!')

