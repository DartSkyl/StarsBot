import time
from datetime import datetime

from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext

from utils.admin_router import admin_router
from utils.task_model import task_manager
from keyboards import main_menu_admin, edit_new_task, task_menu, task_keys, edit_task
from states import AdminStates
from loader import bot, bot_base


@admin_router.message(F.text == '–ù–∞–∑–∞–¥')
@admin_router.message(Command('admin'))
async def start_func(msg: Message, state: FSMContext):
    msg_text = '–®–∞–ª–æ–º, –ø—Ä–∞–≤–æ—Å–ª–∞–≤–Ω—ã–µ üòÄ'
    await msg.answer(msg_text, reply_markup=main_menu_admin)
    await state.clear()


# ====================
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
# ====================

@admin_router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ')
async def start_add_new_task(msg: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await state.set_state(AdminStates.start_new_task)
    await msg.answer('–°–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ:')


@admin_router.message(AdminStates.start_new_task)
async def catch_new_channels(msg: Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if msg.document:
        user_file = await bot.get_file(msg.document.file_id)
        file = await bot.download_file(user_file.file_path)
        await state.set_data({'new_task_channels_list': file.read().decode().splitlines()})
        await state.set_state(AdminStates.new_task_set_reward)
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ –∑–≤–µ–∑–¥–∞—Ö:')
    elif msg.text:
        await state.set_data({'new_task_channels_list': msg.text.split('\n')})
        await state.set_state(AdminStates.new_task_set_reward)
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ –∑–≤–µ–∑–¥–∞—Ö:')


@admin_router.message(AdminStates.new_task_set_reward, F.text.regexp(r'^-?\d+$|^-?\d+\.\d{2}$'))
async def catch_reward_for_task(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ"""
    task_channels = (await state.get_data())['new_task_channels_list']
    task_channels_str = '\n'.join(task_channels)
    msg_text = (f'–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n'
                f'–ö–∞–Ω–∞–ª—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:\n\n{task_channels_str}\n\n'
                f'–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {msg.text}')
    await state.update_data({'reward': msg.text})
    await msg.answer(msg_text, reply_markup=edit_new_task)
    await state.set_state(AdminStates.preview_new_task)


async def catch_edit_task(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∑–∞–¥–∞–Ω–∏–µ"""
    reward = (await state.get_data())['reward']
    task_channels = (await state.get_data())['new_task_channels_list']
    task_channels_str = '\n'.join(task_channels)
    msg_text = (f'–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n'
                f'–ö–∞–Ω–∞–ª—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:\n\n{task_channels_str}\n\n'
                f'–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ: {reward}')
    await msg.answer(msg_text, reply_markup=edit_new_task)
    await state.set_state(AdminStates.preview_new_task)


@admin_router.callback_query(AdminStates.preview_new_task, F.data == 'add_new_task')
async def save_new_task(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –≤–µ–∑–¥–µ –≥–¥–µ –º–æ–∂–Ω–æ"""
    await callback.answer()
    task_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    await task_manager.save_new_task(
        channels_list=task_data['new_task_channels_list'],
        reward=task_data['reward']
    )

    await callback.message.answer('–ó–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_menu_admin)
    await state.clear()


@admin_router.callback_query(AdminStates.preview_new_task, F.data.startswith('edit_'))
async def edit_some_task_data(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ–º –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await callback.answer()
    if callback.data == 'edit_channels':
        await state.set_state(AdminStates.edit_channels)
        await callback.message.answer('–°–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
    elif callback.data == 'edit_reward':
        await state.set_state(AdminStates.edit_reward)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ –∑–≤–µ–∑–¥–∞—Ö:')


@admin_router.message(AdminStates.edit_channels)
async def get_edit_channels(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    if msg.document:
        user_file = await bot.get_file(msg.document.file_id)
        file = await bot.download_file(user_file.file_path)
        await state.update_data({'new_task_channels_list': file.read().decode().splitlines()})
    elif msg.text:
        await state.update_data({'new_task_channels_list': msg.text.split('\n')})

    await state.set_state(AdminStates.preview_new_task)
    await catch_edit_task(msg, state)


@admin_router.message(AdminStates.edit_reward, F.text.regexp(r'^-?\d+$|^-?\d+\.\d{2}$'))
async def catch_new_reward(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ"""
    await state.update_data({'reward': msg.text})
    await state.set_state(AdminStates.preview_new_task)
    await catch_edit_task(msg, state)


# ====================
# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è–º–∏
# ====================

async def epoch_to_formatted_date(epoch_seconds):
    """–ü–µ—Ä–µ–≤–æ–¥ –∏–∑ —Å–µ–∫—É–Ω–¥ –≤ —Å—Ç—Ä–æ–∫—É"""
    dt = datetime.fromtimestamp(epoch_seconds)
    formatted_date = dt.strftime("%H:%M:%S %d.%m.%Y")
    return formatted_date


async def forming_task_str_for_user(task):
    """–î–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    task_channels_str = '\n'.join(task.channels_list)
    task_str = (f'–ó–∞–¥–∞–Ω–∏–µ –æ—Ç <b><i>{await epoch_to_formatted_date(task.task_id)}</i></b>\n\n'
                f'<b>–ö–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n{task_channels_str}\n\n'
                f'<b>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ:</b> {int(task.reward) / 100}\n\n'
                f'<b>–ö–æ–ª-–≤–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–∏—Ö:</b> {len(task.who_complete)}')
    return task_str


@admin_router.message(F.text == '–ó–∞–¥–∞–Ω–∏—è')
async def start_add_new_task(msg: Message):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π"""
    await msg.answer('–ú–µ–Ω—é –∑–∞–¥–∞–Ω–∏–π:', reply_markup=task_menu)


@admin_router.message(F.text == '–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è')
async def current_task_list_menu(msg: Message, state: FSMContext):
    """–û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
    await state.clear()
    all_tasks_list = await task_manager.get_tasks_list()
    if len(all_tasks_list) > 0:
        for task in all_tasks_list:
            task_str = await forming_task_str_for_user(task)
            await msg.answer(task_str, reply_markup=await task_keys(task.task_id))
    else:
        await msg.answer('–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç')


@admin_router.callback_query(F.data.startswith('task_'))
async def task_action_catcher(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—é —Å –∑–∞–¥–∞–Ω–∏–µ–º"""
    await callback.answer()
    task_action_info = callback.data.split('_')
    if task_action_info[1] == 'edit':
        await state.set_state(AdminStates.task_edit_menu)
        await state.set_data({'task_id': int(task_action_info[2])})
        task = await task_manager.get_task(int(task_action_info[2]))
        task_str = await forming_task_str_for_user(task)
        await callback.message.answer(task_str, reply_markup=edit_task)
    elif task_action_info[1] == 'executors':
        pass
    else:
        await task_manager.remove_task(int(task_action_info[2]))
        await callback.message.edit_text('–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')


@admin_router.callback_query(AdminStates.task_edit_menu, F.data.startswith('edit_'))
async def task_action_catcher(callback: CallbackQuery, state: FSMContext):
    """–õ–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –º–∞–Ω–∏–ø—É–ª—è—Ü–∏—é —Å –∑–∞–¥–∞–Ω–∏–µ–º"""
    await callback.answer()
    if callback.data == 'edit_channels':
        await state.set_state(AdminStates.edit_channels_menu)
        await callback.message.answer('–°–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∫–∞–Ω–∞–ª–∞–º–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ:')
    elif callback.data == 'edit_reward':
        await state.set_state(AdminStates.edit_reward_menu)
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –≤ –∑–≤–µ–∑–¥–∞—Ö:')


@admin_router.message(AdminStates.edit_channels_menu)
async def get_edit_channels(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
    task_id = (await state.get_data())['task_id']
    if msg.document:
        user_file = await bot.get_file(msg.document.file_id)
        file = await bot.download_file(user_file.file_path)

        new_channels = file.read().decode().splitlines()
        task = await task_manager.edit_task(task_id=task_id, new_channels=new_channels)

    else:

        new_channels = msg.text.split('\n')
        task = await task_manager.edit_task(task_id=task_id, new_channels=new_channels)

    task_str = await forming_task_str_for_user(task)
    await msg.answer(task_str, reply_markup=await task_keys(task_id))


@admin_router.message(AdminStates.edit_reward_menu, F.text.regexp(r'^-?\d+$|^-?\d+\.\d{2}$'))
async def catch_new_reward(msg: Message, state: FSMContext):
    """–õ–æ–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ"""
    task_id = (await state.get_data())['task_id']
    task = await task_manager.edit_task(task_id=task_id, new_reward=int(float(msg.text) * 100))
    task_str = await forming_task_str_for_user(task)
    await msg.answer(task_str, reply_markup=await task_keys(task_id))
